msgid ""
msgstr ""
"Project-Id-Version: dogroups 0.0\n"
"POT-Creation-Date: 2024-02-15 21:23-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: dogroups.c:75
msgid "Internal error: order not integer vector"
msgstr ""

#: dogroups.c:76
msgid "Internal error: starts not integer"
msgstr ""

#: dogroups.c:77
msgid "Internal error: lens not integer"
msgstr ""

#: dogroups.c:79
msgid "Internal error: jiscols not NULL but o__ has length"
msgstr ""

#: dogroups.c:80
msgid "Internal error: xjiscols not NULL but o__ has length"
msgstr ""

#: dogroups.c:81
msgid "env is not an environment"
msgstr ""

#: dogroups.c:100
#, c-format
msgid ""
"Internal error: unsupported size-0 type '%s' in column %d of 'by' should "
"have been caught earlier"
msgstr ""

#: dogroups.c:105
#, c-format
msgid "!length(bynames)[%d]==length(groups)[%d]==length(grpcols)[%d]"
msgstr ""

#: dogroups.c:127
msgid "row.names attribute of .SD not found"
msgstr ""

#: dogroups.c:129
#, c-format
msgid ""
"row.names of .SD isn't integer length 2 with NA as first item; i.e., ."
"set_row_names(). [%s %d %d]"
msgstr ""

#: dogroups.c:134
msgid "length(names)!=length(SD)"
msgstr ""

#: dogroups.c:140
#, c-format
msgid ""
"Internal error: size-0 type %d in .SD column %d should have been caught "
"earlier"
msgstr ""

#: dogroups.c:142
#, c-format
msgid "Internal error: SDall %d length = %d != %d"
msgstr ""

#: dogroups.c:150
msgid "length(xknames)!=length(xSD)"
msgstr ""

#: dogroups.c:154
#, c-format
msgid ""
"Internal error: type %d in .xSD column %d should have been caught by now"
msgstr ""

#: dogroups.c:158
#, c-format
msgid "length(iSD)[%d] != length(jiscols)[%d]"
msgstr ""

#: dogroups.c:159
#, c-format
msgid "length(xSD)[%d] != length(xjiscols)[%d]"
msgstr ""

#: dogroups.c:271
#, c-format
msgid "j evaluates to type '%s'. Must evaluate to atomic vector or list."
msgstr ""

#: dogroups.c:279
msgid ""
"All items in j=list(...) should be atomic vectors or lists. If you are "
"trying something like j=list(.SD,newcol=mean(colA)) then use := by group "
"instead (much quicker), or cbind or merge afterwards."
msgstr ""

#: dogroups.c:288
msgid ""
"RHS of := is NULL during grouped assignment, but it's not possible to delete "
"parts of a column."
msgstr ""

#: dogroups.c:292
#, c-format
msgid ""
"Supplied %d items to be assigned to group %d of size %d in column '%s'. The "
"RHS length must either be 1 (single values are ok) or match the LHS length "
"exactly. If you wish to 'recycle' the RHS please use rep() explicitly to "
"make this intent clear to readers of your code."
msgstr ""

#: dogroups.c:303
msgid ""
"Internal error: Trying to add new column by reference but tl is full; "
"setalloccol should have run first at R level before getting to this point in "
"dogroups"
msgstr ""

#: dogroups.c:324
#, c-format
msgid "Group %d column '%s': %s"
msgstr ""

#: dogroups.c:331
msgid "j doesn't evaluate to the same number of columns for each group"
msgstr ""

#: dogroups.c:365
#, c-format
msgid ""
"Column %d of j's result for the first group is NULL. We rely on the column "
"types of the first result to decide the type expected for the remaining "
"groups (and require consistency). NULL columns are acceptable for later "
"groups (and those are replaced with NA of appropriate type and recycled) but "
"not for the first. Please use a typed empty vector instead, such as "
"integer() or numeric()."
msgstr ""

#: dogroups.c:368
msgid ""
"j appears to be a named vector. The same names will likely be created over "
"and over again for each group and slow things down. Try and pass a named "
"list (which data.table optimizes) or an unnamed list() instead.\n"
msgstr ""

#: dogroups.c:370
#, c-format
msgid ""
"Column %d of j is a named vector (each item down the rows is named, "
"somehow). Please remove those names for efficiency (to save creating them "
"over and over for each group). They are ignored anyway.\n"
msgstr ""

#: dogroups.c:378
msgid ""
"The result of j is a named list. It's very inefficient to create the same "
"names over and over again for each group. When j=list(...), any names are "
"detected, removed and put back after grouping has completed, for efficiency. "
"Using j=transform(), for example, prevents that speedup (consider changing "
"to :=). This message may be upgraded to warning in future.\n"
msgstr ""

#: dogroups.c:390
#, c-format
msgid "dogroups: growing from %d to %d rows\n"
msgstr ""

#: dogroups.c:391
#, c-format
msgid "dogroups: length(ans)[%d]!=ngrpcols[%d]+njval[%d]"
msgstr ""

#: dogroups.c:409
#, c-format
msgid ""
"Item %d of j's result for group %d is zero length. This will be filled with "
"%d NAs to match the longest column in this result. Later groups may have a "
"similar problem but only the first is reported to save filling the warning "
"buffer."
msgstr ""

#: dogroups.c:416
#, c-format
msgid ""
"Column %d of result for group %d is type '%s' but expecting type '%s'. "
"Column types must be consistent for each group."
msgstr ""

#: dogroups.c:418
#, c-format
msgid ""
"Supplied %d items for column %d of group %d which has %d rows. The RHS "
"length must either be 1 (single values are ok) or match the LHS length "
"exactly. If you wish to 'recycle' the RHS please use rep() explicitly to "
"make this intent clear to readers of your code."
msgstr ""

#: dogroups.c:439
#, c-format
msgid "Wrote less rows (%d) than allocated (%d).\n"
msgstr ""

#: dogroups.c:461
#, c-format
msgid "Internal error: block 0 [%d] and block 1 [%d] have both run"
msgstr ""

#: dogroups.c:463
#, c-format
msgid ""
"\n"
"  %s took %.3fs for %d groups\n"
msgstr ""

#: dogroups.c:465
#, c-format
msgid "  eval(j) took %.3fs for %d calls\n"
msgstr ""

#: dogroups.c:489
msgid "growVector passed NULL"
msgstr ""

#: dogroups.c:509
#, c-format
msgid "Internal error: growVector doesn't support type '%s'"
msgstr ""
